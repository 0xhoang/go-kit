// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: gokit.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GoKit_Profile_FullMethodName = "/proto.GoKit/Profile"
)

// GoKitClient is the client API for GoKit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoKitClient interface {
	// Sends a greeting
	Profile(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
}

type goKitClient struct {
	cc grpc.ClientConnInterface
}

func NewGoKitClient(cc grpc.ClientConnInterface) GoKitClient {
	return &goKitClient{cc}
}

func (c *goKitClient) Profile(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, GoKit_Profile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoKitServer is the server API for GoKit service.
// All implementations should embed UnimplementedGoKitServer
// for forward compatibility
type GoKitServer interface {
	// Sends a greeting
	Profile(context.Context, *EmptyRequest) (*UserInfoResponse, error)
}

// UnimplementedGoKitServer should be embedded to have forward compatible implementations.
type UnimplementedGoKitServer struct {
}

func (UnimplementedGoKitServer) Profile(context.Context, *EmptyRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}

// UnsafeGoKitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoKitServer will
// result in compilation errors.
type UnsafeGoKitServer interface {
	mustEmbedUnimplementedGoKitServer()
}

func RegisterGoKitServer(s grpc.ServiceRegistrar, srv GoKitServer) {
	s.RegisterService(&GoKit_ServiceDesc, srv)
}

func _GoKit_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoKitServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoKit_Profile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoKitServer).Profile(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoKit_ServiceDesc is the grpc.ServiceDesc for GoKit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoKit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GoKit",
	HandlerType: (*GoKitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Profile",
			Handler:    _GoKit_Profile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gokit.proto",
}
